management:
  metrics:
    tags:
      application: ${info.app.name}
      application.version: ${info.app.version}
      service: "scdf server"
    web:
      server:
        request:
          autotime:
            enabled: true # true is default to Boot 2.3.2 at least.
            percentiles-histogram: true
    export:
      influx:
        enabled: false
      prometheus:
        enabled: false
        rsocket:
          enabled: false
      wavefront:
        enabled: false
  endpoints:
    web:
      base-path: /management
      exposure:
        include: "health,info"
  endpoint:
    info:
      enabled: true
  security:
    roles: MANAGE
logging:
  level:
    org.springframework.beans: 'WARN'
    org.springframework.context: 'WARN'
    org.springframework.jmx: 'WARN'
    org.springframework.web: 'WARN'
    org.springframework.security: 'WARN'
    org.springframework.integration: 'WARN'
    org.springframework.boot: 'WARN'
    # The following INFO is to log the generated password when using basic security
    org.springframework.boot.autoconfigure.security: 'INFO'
    # The following INFO is to log the embedded tomcat port
    org.springframework.boot.web.embedded.tomcat: 'INFO'
    # Silence annoying exception trace logged on info level - gh-2750
    org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl: 'WARN'
server:
  error:
    include-message: always
spring:
  mvc.async.request-timeout: 120000
  batch:
    initialize-schema: never
  jpa:
    properties:
      hibernate:
        id.new_generator_mappings: true
        # Statistics generation is required for publishing JPA micrometer metrics.
        # generate_statistics: true
    hibernate:
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  flyway:
    enabled: true
    baselineVersion: 1
    baselineOnMigrate: true
    table: flyway_schema_history_dataflow
    locations:
      - classpath:org/springframework/cloud/dataflow/server/db/migration/{vendor}
    check-location: false
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.session.SessionAutoConfiguration
  cloud:
    task:
      initialize:
        enable: false
    dataflow:
      rdbms:
        initialize:
          enable: false
      container:
        registry-configurations:
          default:
            registry-host: registry-1.docker.io
            authorization-type: dockeroauth2
            extra:
              "registryAuthUri": 'https://auth.docker.io/token?service=registry.docker.io&scope=repository:{repository}:pull&offline_token=1&client_id=shell'
      version-info:
        dependency-fetch:
          enabled: false
        dependencies:
          spring-cloud-dataflow-dashboard:
            name: Spring Cloud Dataflow UI
            version: "@spring-cloud-dataflow-ui.version@"
          spring-cloud-dataflow-core:
            name: Spring Cloud Data Flow Core
            version: "@project.version@"
          spring-cloud-dataflow-implementation:
            name: ${info.app.name}
            version: ${info.app.version}
          spring-cloud-dataflow-shell:
            name: Spring Cloud Data Flow Shell
            version: "@project.version@"
            url: "{repository}/org/springframework/cloud/spring-cloud-dataflow-shell/{version}/spring-cloud-dataflow-shell-{version}.jar"
            checksum-sha1-url: "{repository}/org/springframework/cloud/spring-cloud-dataflow-shell/{version}/spring-cloud-dataflow-shell-{version}.jar.sha1"
            checksum-sha256-url: "{repository}/org/springframework/cloud/spring-cloud-dataflow-shell/{version}/spring-cloud-dataflow-shell-{version}.jar.sha256"
      task:
        composedtaskrunner:
          uri: "maven://org.springframework.cloud:spring-cloud-dataflow-composed-task-runner:@project.version@"
        deployer-properties:
          group-excludes:
            - spring.cloud.deployer.kubernetes.fabric8
          property-excludes:
            - spring.cloud.deployer.local.maximum-concurrent-tasks
            - spring.cloud.deployer.kubernetes.maximum-concurrent-tasks
            - spring.cloud.deployer.cloudfoundry.maximum-concurrent-tasks
            - spring.cloud.deployer.cloudfoundry.org
            - spring.cloud.deployer.cloudfoundry.space
            - spring.cloud.deployer.cloudfoundry.url
            - spring.cloud.deployer.cloudfoundry.username
            - spring.cloud.deployer.cloudfoundry.password
            - spring.cloud.deployer.cloudfoundry.skip-ssl-validation
      security:
        authorization:
          enabled: true
          loginUrl: "/"
          permit-all-paths: "/management/health,/management/info,/authenticate,/security/info,/assets/**,/dashboard/logout-success-oauth.html,/favicon.ico"
          rules:
            # About

            - GET    /about                          => hasRole('ROLE_VIEW')

            # Audit

            - GET /audit-records                     => hasRole('ROLE_VIEW')
            - GET /audit-records/**                  => hasRole('ROLE_VIEW')

            # Boot Endpoints

            - GET /management/**                  => hasRole('ROLE_MANAGE')

            # Apps

            - GET    /apps                           => hasRole('ROLE_VIEW')
            - GET    /apps/**                        => hasRole('ROLE_VIEW')
            - DELETE /apps/**                        => hasRole('ROLE_DESTROY')
            - POST   /apps                           => hasRole('ROLE_CREATE')
            - POST   /apps/**                        => hasRole('ROLE_CREATE')
            - PUT    /apps/**                        => hasRole('ROLE_MODIFY')

            # Completions

            - GET /completions/**                    => hasRole('ROLE_VIEW')

            # Job Executions & Batch Job Execution Steps && Job Step Execution Progress

            - GET    /jobs/executions                => hasRole('ROLE_VIEW')
            - PUT    /jobs/executions/**             => hasRole('ROLE_MODIFY')
            - GET    /jobs/executions/**             => hasRole('ROLE_VIEW')
            - GET    /jobs/thinexecutions            => hasRole('ROLE_VIEW')

            # Batch Job Instances

            - GET    /jobs/instances                 => hasRole('ROLE_VIEW')
            - GET    /jobs/instances/*               => hasRole('ROLE_VIEW')

            # Running Applications

            - GET    /runtime/streams                => hasRole('ROLE_VIEW')
            - GET    /runtime/streams/**             => hasRole('ROLE_VIEW')
            - GET    /runtime/apps                   => hasRole('ROLE_VIEW')
            - GET    /runtime/apps/**                => hasRole('ROLE_VIEW')

            # Stream Definitions

            - GET    /streams/definitions            => hasRole('ROLE_VIEW')
            - GET    /streams/definitions/*          => hasRole('ROLE_VIEW')
            - GET    /streams/definitions/*/related  => hasRole('ROLE_VIEW')
            - GET    /streams/definitions/*/applications  => hasRole('ROLE_VIEW')
            - POST   /streams/definitions            => hasRole('ROLE_CREATE')
            - DELETE /streams/definitions/*          => hasRole('ROLE_DESTROY')
            - DELETE /streams/definitions            => hasRole('ROLE_DESTROY')

            # Stream Deployments

            - DELETE /streams/deployments/*          => hasRole('ROLE_DEPLOY')
            - DELETE /streams/deployments            => hasRole('ROLE_DEPLOY')
            - POST   /streams/deployments/**         => hasRole('ROLE_MODIFY')
            - GET    /streams/deployments/**         => hasRole('ROLE_VIEW')

            # Stream Validations

            - GET /streams/validation/               => hasRole('ROLE_VIEW')
            - GET /streams/validation/*              => hasRole('ROLE_VIEW')

            # Stream Logs
            - GET /streams/logs/**                    => hasRole('ROLE_VIEW')

            # Task Definitions

            - POST   /tasks/definitions              => hasRole('ROLE_CREATE')
            - DELETE /tasks/definitions/*            => hasRole('ROLE_DESTROY')
            - DELETE /tasks/definitions              => hasRole('ROLE_DESTROY')
            - GET    /tasks/definitions              => hasRole('ROLE_VIEW')
            - GET    /tasks/definitions/*            => hasRole('ROLE_VIEW')

            # Task Executions

            - GET    /tasks/executions               => hasRole('ROLE_VIEW')
            - GET    /tasks/executions/*             => hasRole('ROLE_VIEW')
            - POST   /tasks/executions               => hasRole('ROLE_DEPLOY')
            - POST   /tasks/executions/*             => hasRole('ROLE_DEPLOY')
            - DELETE /tasks/executions/*             => hasRole('ROLE_DESTROY')
            - DELETE /tasks/executions               => hasRole('ROLE_DESTROY')
            - GET    /tasks/info/*                   => hasRole('ROLE_VIEW')

            # Task Schedules

            - GET    /tasks/schedules                => hasRole('ROLE_VIEW')
            - GET    /tasks/schedules/*              => hasRole('ROLE_VIEW')
            - GET    /tasks/schedules/instances      => hasRole('ROLE_VIEW')
            - GET    /tasks/schedules/instances/*    => hasRole('ROLE_VIEW')
            - POST   /tasks/schedules                => hasRole('ROLE_SCHEDULE')
            - DELETE /tasks/schedules/*              => hasRole('ROLE_SCHEDULE')
            - DELETE /tasks/schedules                => hasRole('ROLE_SCHEDULE')

            # Task Platform Account List */

            - GET    /tasks/platforms                => hasRole('ROLE_VIEW')

            # Task Validations

            - GET    /tasks/validation/               => hasRole('ROLE_VIEW')
            - GET    /tasks/validation/*              => hasRole('ROLE_VIEW')

            # Task Logs
            - GET /tasks/logs/*                       => hasRole('ROLE_VIEW')

            # Task Ctr
            - GET    /tasks/ctr/*                     => hasRole('ROLE_VIEW')

            # Tools

            - POST   /tools/**                       => hasRole('ROLE_VIEW')
